---
AWSTemplateFormatVersion: '2010-09-09'
Description: Create Lambda function to create EBS snapshots (incl IAM Resources)
Resources: 
  LambdaEBSSnapshot:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+

          - - 'import boto3'
            - ''
            - 'ec = boto3.client("ec2")'
            - ''
            - ''
            - 'def lambda_handler(event, context):'
            - '    reservations = ec.describe_instances('
            - '        Filters=['
            - '            {'
            - '                "Name": "tag:Backups", '
            - '                "Values": ['
            - '                    "true", '
            - '                    "True"'
            - '                ]'
            - '            },'
            - '        ]        '
            - '    ).get('
            - '        "Reservations", []'
            - '    )'
            - ''
            - '    instances = sum('
            - '        ['
            - '            [i for i in r["Instances"]]'
            - '            for r in reservations'
            - '        ], [])'
            - ''
            - '    print "Found %d instances that need backing up" % len(instances)'
            - ''
            - '    for instance in instances:'
            - '        for dev in instance["BlockDeviceMappings"]:'
            - '            if dev.get("Ebs", None) is None:'
            - '                continue'
            - '            vol_id = dev["Ebs"]["VolumeId"]'
            - '            print "Found EBS volume %s on instance %s" % ('
            - '                vol_id, instance["InstanceId"])'
            - ''
            - '            ec.create_snapshot('
            - '                VolumeId=vol_id,'
            - '            )'
      Description: A lambda function that will create EBS snapshots for all attached storage.
      Handler: index.lambda_handler
      Role: !GetAtt LambdaEBSSnapshotRole.Arn
      Runtime: python2.7
      Timeout: '60'
  LambdaEBSSnapshotRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaEBSSnapshot
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource:
                  - 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:Describe*'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'ec2:CreateSnapshot'
                  - 'ec2:ModifySnapshotAttribute'
                  - 'ec2:ResetSnapshotAttribute'
                Resource:
                  - '*'
  LambdaEBSSnapshotTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${LambdaEBSSnapshot}
      Description: !Sub Trigger for function ${LambdaEBSSnapshot}
      ScheduleExpression: cron(0 18 ? * MON-FRI *) # 6PM UTC MON-FRI 
      State: ENABLED
      Targets:
      - Arn: !GetAtt LambdaEBSSnapshot.Arn
        Id: LambdaEBSSnapshotTrigger
  LambdaEBSSnapshotPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${LambdaEBSSnapshot}
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEBSSnapshotTrigger.Arn
